<% layout('layouts/boilerplate') %>

<link rel="stylesheet" href="/stylesheets/search.css">
<link rel="stylesheet" href="/stylesheets/heart.css">
<!--the path is like above instead of '../layouts/boilerplate bcos of ejsmate's docs-->
<div id="cluster-map"></div>
<h1>All Campgrounds</h1>
<div>
  <!-- 20240218 search -->
  <!-- <form action="/campgrounds/search" method="POST"> -->
    <div class="search-container">
      <div class="search-wrapper">
         <form action="" autocomplete="off"> 
  <div id="autocomplete-wrapper" class="autocomplete-wrapper " style="z-index: 1; ">
        <!-- <label for="campgroundName">Search</label> -->
        <input type="text" class="autocomplete-input form-control" id="campgroundName" data-search name="campgroundName" placeholder="Campground name">
        <ul class="autocomplete-list" id="campground-list" >
  
        </ul>

        </div>
        <!-- <button type="submit" class="btn-submit">send</button> -->

         </form> 
        <!-- search amenities -->
        <div class="autocomplete-wrapper" style="z-index: 0; ">
          <multi-input class="form-control">
            <input type="text" list="amenities" id="am" onkeydown="return false;" placeholder="Pick amenities (optional)">
            <datalist id="amenities">
              <!-- datalist name=campground[amenities] totally ignored by req.body -->
              <option value="yurt"></option>
              <option value="stargazing tour"></option>
              <option value="zipline"></option>
              <option value="kitchen"></option>
              <option value="hiking tour"></option>
              <option value="foodtruck"></option>
              <option value="breakfast"></option>
              <option value="fishing tour"></option>
              <option value="premium yurt"></option>
              <option value="live music"></option>
              <option value="yoga class"></option>
            </datalist>
          </multi-input>
        </div>
        <input type="hidden" name="am" id="final-amenities">
        </div>
<div class="search-wrapper" >

            <div class="input-group input-group-sm mb-3 autocomplete-wrapper" >
              <div class="input-group-prepend">
                <span class="input-group-text" id="inputGroup-sizing-sm startDate">Start date</span>
              </div>
              <input type="date" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" id="startDate" name="startDate">
            </div>
          
          
            <div class="input-group input-group-sm mb-3 autocomplete-wrapper" >
              <div class="input-group-prepend">
                <span class="input-group-text" id="inputGroup-sizing-sm">End date</span>
              </div>
              <input type="date" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" id="endDate" name="endDate">
            </div>
            <!-- <input type="date" name="endDate" id="endDate"> -->
          
          <a id="searchBtn" href="#" class="btn btn-outline-secondary" style="width: 50px;margin-bottom: 16px;"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/>
          </svg></i></a>
            </div>

          

        

          </div> 
        <!-- </form> -->


  <a href="/campgrounds/new">Add Campground</a>
</div>

<% for(let campground of campgrounds ) {%>

<div class="card mb-3">
  <div class="row">
    <div class="col-md-4">
      <% if(campground.images.length) {%>
      <img class="img-fluid" alt="" src="<%=campground.images[0].url %>" crossorigin="anonymous">
      <% }else{ %>
        <img src="https://res.cloudinary.com/douqbebwk/image/upload/v1600103881/YelpCamp/lz8jjv2gyynjil7lswf4.png" alt="" class="img-fluid" crossorigin="anonymous">
        <% } %>
    </div>
    <div class="col-md-8">
      <div class="card-body">
        <div class="wrapheartdiv" style="display: flex; flex-direction: row;">
        <h5 style="display: inline;" class="card-title"><%=campground.title%></h5>

        <!-- 20240208 -->

        <!-- <button type="button" class="favorite-button">
          
          <i crossorigin="anonymous" class="fas fa-heart favorite__icon favorite--enable"></i>
          <i crossorigin="anonymous" class="far fa-heart favorite__icon favorite--not"></i></button> -->
          <button style="position: absolute; top:3px; right:20px" type="button" class="favorite-button" id="<%=campground._id %>">
            <!-- Conditional rendering of favorite icon -->
            
                <!-- <i crossorigin="anonymous" class="fas fa-heart favorite__icon favorite--enable"></i> -->
            
              <i crossorigin="anonymous" class="fas fa-heart favorite__icon favorite--enable"></i>
                <i crossorigin="anonymous" class="far fa-heart favorite__icon favorite--not"></i>
            
        </button>
        </div>
        
        <p class="card-text"><%=campground.description%></p>
        <p class="card-text">
        <small class="text-muted"><%=campground.location  %></small>  
        </p>
        <a class="btn btn-primary" href="/campgrounds/<%=campground._id %>?page=1&limit=4">View <%=campground.title %></a>
        <% if((!currentUser) || (currentUser&&!(campground.author.equals(currentUser._id)))) {%>
        <a class="btn btn-info" href="/campgrounds/<%=campground._id %>/reservations/new">Book <%=campground.title %></a>
        <% } %>
      </div>
    </div>
  </div>
</div>
<% } %>


<%if(prevPage||nextPage&&(!startDate&&!endDate&&!campgroundName&&!am)){%>
<nav aria-label="Page navigation example">
  <ul class="pagination">
    <% if(prevPage){ %>
    <li class="page-item"><a class="page-link" href="/campgrounds?page=<%=prevPage %>&limit=4">Prev</a></li>
    <% } %>
    <% if(nextPage){ %>
      <li class="page-item"><a class="page-link" href="/campgrounds?page=<%=nextPage %>&limit=4">Next</a></li>
      <% } %>
    <li class="page-item"><a class="page-link" href="/campgrounds">View All Campgrounds</a></li>
  </ul>
</nav>
<% } %>

<%if((startDate||endDate||campgroundName||am)){%>
  <nav aria-label="Page navigation example">
    <ul class="pagination">
      <% if(prevPage){ %>
      <li class="page-item"><a class="page-link" href="/campgrounds/search?startDate=<%=startDate %>&endDate=<%=endDate %>&campgroundName=<%=campgroundName %>&am=<%=am%>&page=<%=prevPage %>&limit=4">Prev</a></li>
      <% } %>
      <% if(nextPage){ %>
        <li class="page-item"><a class="page-link" href="/campgrounds/search?startDate=<%=startDate %>&endDate=<%=endDate %>&campgroundName=<%=campgroundName %>&am=<%=am%>&page=<%=nextPage %>&limit=4">Next</a></li>
        <% } %>
      <li class="page-item"><a class="page-link" href="/campgrounds/search?startDate=<%=startDate %>&endDate=<%=endDate %>&campgroundName=<%=campgroundName %>&am=<%=am%>">View All Search Results</a></li>

      <li class="page-item"><a class="page-link" href="/campgrounds?page=1&limit=4">View Campgrounds</a></li>

    </ul>
  </nav>
  <% } %>



<script>
const mapToken='<%-process.env.MAPBOX_TOKEN%>'
console.log('maptoken: ',mapToken)
  const campgrounds={
    features:
    <%-JSON.stringify(allCamps) %>
  }
</script>
<script src="/javascripts/clusterMap.js"></script>

<script src="/javascripts/heart.js"></script>
<script crossorigin="anonymous" src="https://use.fontawesome.com/releases/v5.15.4/js/all.js"></script>

<script src="/javascripts/searchUrl.js"></script>
<script src="/javascripts/getcampnames.js"></script>
<script src="/javascripts/autocompleteDropdown.js"></script>
<script>
const multiInput = document.querySelector('multi-input'); 
const values = document.querySelector('#values'); 

document.querySelector('input').focus();
</script>
<script>
  class MultiInput extends HTMLElement {
    constructor() {
      super();
      // This is a hack :^(.
      // ::slotted(input)::-webkit-calendar-picker-indicator doesn't work in any browser.
      // ::slotted() with ::after doesn't work in Safari.
      this.innerHTML +=
      `<style>
      multi-input input::-webkit-calendar-picker-indicator {
        display: none;
      }
      /* NB use of pointer-events to only allow events from the × icon */
      multi-input div.item::after {
        color: black;
        content: '×';
        cursor: pointer;
        font-size: 18px;
        pointer-events: auto;
        position: absolute;
        right: 5px;
        top: -1px;
      }
  
      </style>`;
      this._shadowRoot = this.attachShadow({mode: 'open'});
      this._shadowRoot.innerHTML =
      `<style>
      :host {
        border: var(--multi-input-border, 1px solid #ddd);
        display: block;
        overflow: hidden;
        padding: 5px;
      }
      /* NB use of pointer-events to only allow events from the × icon */
      ::slotted(div.item) {
        background-color: var(--multi-input-item-bg-color, #dedede);
        border: var(--multi-input-item-border, 1px solid #ccc);
        border-radius: 2px;
        color: #222;
        display: inline-block;
        font-size: var(--multi-input-item-font-size, 14px);
        margin: 5px;
        padding: 2px 25px 2px 5px;
        pointer-events: none;
        position: relative;
        top: -1px;
      }
      /* NB pointer-events: none above */
      ::slotted(div.item:hover) {
        background-color: #eee;
        color: black;
      }
      ::slotted(input) {
        border: none;
        font-size: var(--multi-input-input-font-size, 14px);
        outline: none;
        padding: 10px 10px 10px 5px; 
      }
      </style>
      <slot></slot>`;
  
      this._datalist = this.querySelector('datalist');
      this._allowedValues = [];
      for (const option of this._datalist.options) {
        this._allowedValues.push(option.value);
      }
  
      this._input = this.querySelector('input');
      this._input.onblur = this._handleBlur.bind(this);
      this._input.oninput = this._handleInput.bind(this);
      this._input.onkeydown = (event) => {
        this._handleKeydown(event);
      };
  
      this._allowDuplicates = this.hasAttribute('allow-duplicates');
    }
  
    // Called by _handleKeydown() when the value of the input is an allowed value.
    _addItem(value) {
      this._input.value = '';
      const item = document.createElement('div');
      item.classList.add('item');
      item.textContent = value;
      this.insertBefore(item, this._input);
      //add here
      if (multiInput.getValues().length > 0) {
      //values.textContent = `Got ${multiInput.getValues().join(' and ')}!`;
      document.getElementById('amenities').value=multiInput.getValues()
        document.getElementById('final-amenities').value=(document.getElementById('amenities').value)
        console.log(document.getElementById('final-amenities').value)
    } else {
      //values.textContent = 'Got noone  :`^(.'; 
    }  
  
  
  
  
  //
  
      item.onclick = () => {
        this._deleteItem(item);
        document.getElementById('amenities').value=multiInput.getValues()
        document.getElementById('final-amenities').value=(document.getElementById('amenities').value)
        console.log(document.getElementById('final-amenities').value)
  
      };
  
      // Remove value from datalist options and from _allowedValues array.
      // Value is added back if an item is deleted (see _deleteItem()).
      if (!this._allowDuplicates) {
        for (const option of this._datalist.options) {
          if (option.value === value) {
            option.remove();
          };
        }
        this._allowedValues =
        this._allowedValues.filter((item) => item !== value);
      }
    }
  
    // Called when the × icon is tapped/clicked or
    // by _handleKeydown() when Backspace is entered.
    _deleteItem(item) {
      const value = item.textContent;
      item.remove();
      // If duplicates aren't allowed, value is removed (in _addItem())
      // as a datalist option and from the _allowedValues array.
      // So — need to add it back here.
      if (!this._allowDuplicates) {
        const option = document.createElement('option');
        option.value = value;
        // Insert as first option seems reasonable...
        this._datalist.insertBefore(option, this._datalist.firstChild);
        this._allowedValues.push(value);
      }
    }
  
    // Avoid stray text remaining in the input element that's not in a div.item.
    _handleBlur() {
      this._input.value = '';
    }
  
    // Called when input text changes,
    // either by entering text or selecting a datalist option.
    _handleInput() {
      // Add a div.item, but only if the current value
      // of the input is an allowed value
      const value = this._input.value;
      if (this._allowedValues.includes(value)) {
        this._addItem(value);
      }
    }
  
    // Called when text is entered or keys pressed in the input element.
    _handleKeydown(event) {
      const itemToDelete = event.target.previousElementSibling;
      const value = this._input.value;
      // On Backspace, delete the div.item to the left of the input
      if (value ==='' && event.key === 'Backspace' && itemToDelete) {
        this._deleteItem(itemToDelete);
      // Add a div.item, but only if the current value
      // of the input is an allowed value
      } else if (this._allowedValues.includes(value)) {
        this._addItem(value);
        
  
  
      }
    }
  
    // Public method for getting item values as an array.
    getValues() {
      const values = [];
      const items = this.querySelectorAll('.item');
      for (const item of items) {
        values.push(item.textContent);
      }
      return values;
    }
  }
  
  window.customElements.define('multi-input', MultiInput);
  
  </script>



