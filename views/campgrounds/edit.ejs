<% layout('layouts/boilerplate') %>

  <div class="row">
    <h1 class="text-center">Edit Campground</h1>
    <div class="col-md-6 offset-md-3">
      <form action="/campgrounds/<%=campground.id %>?_method=PUT" method="POST" novalidate class="validated-form"
        enctype="multipart/form-data">
        <div class="mb-3">
          <label class="form-label" for="title">Title</label>
          <input class="form-control" type="text" id="title" name="campground[title]" value="<%=campground.title%>"
            required>
          <div class="valid-feedback">
            Looks good!
          </div>
        </div>
        <div class="mb-3">
          <label class="form-label" for="location">Location</label>
          <input class="form-control" type="text" id="location" name="campground[location]"
            value="<%=campground.location%>" required>
          <!--using js object bracket notation ie it is trying to create a req.body object with campground property n inside campground with another property called title-->
          <div class="valid-feedback">
            Looks good!
          </div>
        </div>
        <!-- <div class="mb-3">
          <label class="form-label" for="image">Add Images</label>
          <input type="file" name="image" id="image" multiple>
        </div> -->
        <div class="mb-3">
          <label class="form-label" for="price">Campground Price</label>
          <div class="input-group">
            <span class="input-group-text" id="price-label">$</span>
            <input type="text" class="form-control" placeholder="0.00" aria-label="price" aria-describedby="price-label"
              id="price" name="campground[price]" value="<%=campground.price%>" required>
          </div>
        </div>
        <div class="mb-3">
          <label class="form-label" for="description">Description</label>
          <textarea class="form-control" type="text" id="description" name="campground[description]"
            required><%=campground.description %></textarea>
          <div class="valid-feedback">
            Looks good!
          </div>
        </div>
        <div class="mb-3">
          <label class="form-label" for="am">Amenities (Min 1; Max 4)</label>
          <multi-input class="form-control">
            <input type="text" list="amenities" id="am" onkeydown="return false;">
            <datalist id="amenities" >
              <option value="yurt"></option>
              <option value="stargazing tour"></option>
              <option value="zipline"></option>
              <option value="kitchen"></option>
              <option value="hiking tour"></option>
              <option value="foodtruck"></option>
              <option value="breakfast"></option>
              <option value="fishing tour"></option>
              <option value="premium yurt"></option>
              <option value="live music"></option>
              <option value="yoga class"></option>
            </datalist>
          </multi-input>
          <div class="valid-feedback">
            Looks good!
          </div>
        </div>
        <input type="hidden" name="amenities" id="final-amenities">




        <div class="mb-3">
          <label for="image" class="form-label">Add More Image(s)</label>
          <input
            type="file"
            name="image"
            id="imgUpload"
            class="form-control"
            
            multiple
          />
          <div id="imgPreview" class="d-flex row justify-content-start"></div>
          <!-- <div class="valid-feedback">Looks good!</div>
          <div class="invalid-feedback">Please upload an image.</div> -->
        </div>
        <div class="mb-3">
          <% if(campground.images.length>0) {%>
          <% campground.images.forEach(function(img,i){%>
            <img src="<%=img.thumbnail %>" class="img-thumbnail" alt="">
            <div class="form-check-inline">
              <input type="checkbox" id="img-<%=i %>" name="deleteImages[]" value="<%=img.filename %>">
            </div>
            <label for="img-<%=i %>">Delete?</label>
            <% }) %>
            <% } %>
        </div>
        <div class="mb-3">
          <button class="btn btn-info">Update Campground</button>
        </div>
      </form>
      <a href="/campgrounds/<%=campground._id %>">Back to Campground</a>
    </div>
  </div>

  <!-- <div class="mb-3">
    <label class="form-label" for="speakers">Amenities</label>
    <multi-input class="form-control">
      <input type="text"  list="speakers" name="speakers" value="">
      <datalist id="speakers">
        <option value="Banquo"></option>
        <option value="Bishop Stokesly of London"></option>
        <option value="Caesar’s Second Watchman"></option>
        <option value="Celia"></option>
        <option value="Cleopatra"></option>
        <option value="Dogberry"></option>
        <option value="Falstaff"></option>
        <option value="First Servant"></option>
        <option value="Hamlet"></option>
        <option value="Juliet"></option>
        <option value="Macbeth"></option>
      </datalist>
    </multi-input>
  </div> -->

<script>

</script>

  <script>
  const multiInput = document.querySelector('multi-input'); 
  const values = document.querySelector('#values'); 
  
  document.querySelector('input').focus();
  </script>
  <script>
  class MultiInput extends HTMLElement {
    constructor() {
      super();
      // This is a hack :^(.
      // ::slotted(input)::-webkit-calendar-picker-indicator doesn't work in any browser.
      // ::slotted() with ::after doesn't work in Safari.
      this.innerHTML +=
      `<style>
      multi-input input::-webkit-calendar-picker-indicator {
        display: none;
      }
      /* NB use of pointer-events to only allow events from the × icon */
      multi-input div.item::after {
        color: black;
        content: '×';
        cursor: pointer;
        font-size: 18px;
        pointer-events: auto;
        position: absolute;
        right: 5px;
        top: -1px;
      }
  
      </style>`;
      this._shadowRoot = this.attachShadow({mode: 'open'});
      this._shadowRoot.innerHTML =
      `<style>
      :host {
        border: var(--multi-input-border, 1px solid #ddd);
        display: block;
        overflow: hidden;
        padding: 5px;
      }
      /* NB use of pointer-events to only allow events from the × icon */
      ::slotted(div.item) {
        background-color: var(--multi-input-item-bg-color, #dedede);
        border: var(--multi-input-item-border, 1px solid #ccc);
        border-radius: 2px;
        color: #222;
        display: inline-block;
        font-size: var(--multi-input-item-font-size, 14px);
        margin: 5px;
        padding: 2px 25px 2px 5px;
        pointer-events: none;
        position: relative;
        top: -1px;
      }
      /* NB pointer-events: none above */
      ::slotted(div.item:hover) {
        background-color: #eee;
        color: black;
      }
      ::slotted(input) {
        border: none;
        font-size: var(--multi-input-input-font-size, 14px);
        outline: none;
        padding: 10px 10px 10px 5px; 
      }
      </style>
      <slot></slot>`;
  
      this._datalist = this.querySelector('datalist');
      this._allowedValues = [];
      for (const option of this._datalist.options) {
        this._allowedValues.push(option.value);
      }
  
      this._input = this.querySelector('input');
      this._input.onblur = this._handleBlur.bind(this);
      this._input.oninput = this._handleInput.bind(this);
      this._input.onkeydown = (event) => {
        this._handleKeydown(event);
      };
  
      this._allowDuplicates = this.hasAttribute('allow-duplicates');
    }



    // Called by _handleKeydown() when the value of the input is an allowed value.
    _addItem(value) {
      this._input.value = '';
      const item = document.createElement('div');
      item.classList.add('item');
      item.textContent = value;
      this.insertBefore(item, this._input);
      //add here
      if (multiInput.getValues().length > 0) {
        
        document.getElementById('amenities').value=multiInput.getValues()
      document.getElementById('final-amenities').value=(document.getElementById('amenities').value)
      console.log(document.getElementById('final-amenities').value)
    } else {
      //values.textContent = 'Got noone  :`^(.'; 
    }  
  
  
  
  
  //
  
      item.onclick = () => {
        this._deleteItem(item);
        document.getElementById('amenities').value=multiInput.getValues()
      document.getElementById('final-amenities').value=(document.getElementById('amenities').value)
      console.log(document.getElementById('final-amenities').value)
      };
  
      // Remove value from datalist options and from _allowedValues array.
      // Value is added back if an item is deleted (see _deleteItem()).
      if (!this._allowDuplicates) {
        for (const option of this._datalist.options) {
          if (option.value === value) {
            option.remove();
          };
        }
        this._allowedValues =
        this._allowedValues.filter((item) => item !== value);
      }
    }
  
    // Called when the × icon is tapped/clicked or
    // by _handleKeydown() when Backspace is entered.
    _deleteItem(item) {
      const value = item.textContent;
      item.remove();
      // If duplicates aren't allowed, value is removed (in _addItem())
      // as a datalist option and from the _allowedValues array.
      // So — need to add it back here.
      if (!this._allowDuplicates) {
        const option = document.createElement('option');
        option.value = value;
        // Insert as first option seems reasonable...
        this._datalist.insertBefore(option, this._datalist.firstChild);
        this._allowedValues.push(value);
      }
    }
  
    // Avoid stray text remaining in the input element that's not in a div.item.
    _handleBlur() {
      this._input.value = '';
    }
  
    // Called when input text changes,
    // either by entering text or selecting a datalist option.
    _handleInput() {
      // Add a div.item, but only if the current value
      // of the input is an allowed value
      const value = this._input.value;
      if (this._allowedValues.includes(value)) {
        this._addItem(value);
      }
    }
  
    // Called when text is entered or keys pressed in the input element.
    _handleKeydown(event) {
      const itemToDelete = event.target.previousElementSibling;
      const value = this._input.value;
      // On Backspace, delete the div.item to the left of the input
      if (value ==='' && event.key === 'Backspace' && itemToDelete) {
        this._deleteItem(itemToDelete);
      // Add a div.item, but only if the current value
      // of the input is an allowed value
      } else if (this._allowedValues.includes(value)) {
        this._addItem(value);
        
  
  
      }
    }
  
    // Public method for getting item values as an array.
    getValues() {
      const values = [];
      const items = this.querySelectorAll('.item');
      for (const item of items) {
        values.push(item.textContent);
      }
      return values;
    }
  }
  
  window.customElements.define('multi-input', MultiInput);
  let amen = <%-JSON.stringify(campground.amenities)%>
for(let a of amen)
{
  multiInput._addItem(a)
}


  </script>