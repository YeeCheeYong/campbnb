<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CampBnB</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <link rel="stylesheet" href="/stylesheets/home.css">
    <link rel="stylesheet" href="/stylesheets/search.css">
</head>

<body class="d-flex text-center text-white bg-dark">
    <div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">
        <header class="mb-auto">
            <div>
                <h3 class="float-md-left mb-0">CampBnB</h3>
                <nav class="nav nav-masthead justify-content-center float-md-right">
                    <a class="nav-link active" aria-current="page" href="#">Home</a>
                    <a class="nav-link" href="/campgrounds?page=1&limit=4">Campgrounds</a>
                    <a class="nav-link" href="/campgrounds/recommendations">FYP</a>
                    <% if(!currentUser) { %>
                    <a class="nav-link" href="/login">Login</a>
                    <a class="nav-link" href="/register">Register</a>
                    <% } else { %>
                      <a class="nav-link" href="/user">User</a>
                      <div id="cart"></div>
                    <a class="nav-link" href="/logout">Logout</a>
                    <% } %>
                </nav>
            </div>
        </header>
        <main class="px-3">
            <h1>CampBnB</h1>
            <p class="lead"> Welcome to CampBnB! <br> Stay at exquisite camping sites hosted by our users. <br>
                Feel free to host some of your own and comment on others!</p>
            <!-- <a href="/campgrounds" class="btn btn-lg btn-secondary font-weight-bold border-white bg-white">View
                Campgrounds</a> -->

                <div style="display: flex; flex-direction: row; margin-top: 20px;">
                  <div style="flex: 1;">
                     <form action="" autocomplete="off"> 
              <div id="autocomplete-wrapper" class="autocomplete-wrapper " style="z-index: 1; ">
                    <!-- <label for="campgroundName">Search</label> -->
                    <input type="text" class="autocomplete-input form-control" id="keyword" data-search name="keyword" placeholder="Campground name/location/amenities...">
                    <ul class="autocomplete-list" id="campground-list" >
              
                    </ul>
            
                    </div>
            
                     </form> 

                    </div>

                    <a id="searchBtn" href="#" class="btn btn-outline-secondary" style="width: 50px;margin-bottom: 16px;"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                      <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/>
                    </svg></i></a>
                      
            
                    
            
                      </div> 



        </main>

        <footer class="mt-auto text-white-50">
            <p>&copy; 2024 </p>
        </footer>


    </div>


    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/js/bootstrap.min.js"
        integrity="sha384-oesi62hOLfzrys4LxRF63OJCXdXDipiYWBnvTl9Y9/TRlw5xlKIEHpNyvvDShgf/"
        crossorigin="anonymous"></script>

        <script>
document.getElementById('searchBtn').addEventListener('click', function(event) {
  event.preventDefault(); // Prevent default anchor behavior
  const keyword = document.getElementById('keyword').value;
  const searchUrl = `/campgrounds/searchAll?keyword=${keyword}&page=1&limit=4`;
  window.location.href = searchUrl; // Redirect to search URL
});

        </script>
        <script src="/javascripts/getcampdata.js"></script>
        <script src="/javascripts/autocompleteDropdown.js"></script>
        <script>
        const multiInput = document.querySelector('multi-input'); 
        const values = document.querySelector('#values'); 
        
        document.querySelector('input').focus();
        </script>
        <script>
          class MultiInput extends HTMLElement {
            constructor() {
              super();
              // This is a hack :^(.
              // ::slotted(input)::-webkit-calendar-picker-indicator doesn't work in any browser.
              // ::slotted() with ::after doesn't work in Safari.
              this.innerHTML +=
              `<style>
              multi-input input::-webkit-calendar-picker-indicator {
                display: none;
              }
              /* NB use of pointer-events to only allow events from the × icon */
              multi-input div.item::after {
                color: black;
                content: '×';
                cursor: pointer;
                font-size: 18px;
                pointer-events: auto;
                position: absolute;
                right: 5px;
                top: -1px;
              }
          
              </style>`;
              this._shadowRoot = this.attachShadow({mode: 'open'});
              this._shadowRoot.innerHTML =
              `<style>
              :host {
                border: var(--multi-input-border, 1px solid #ddd);
                display: block;
                overflow: hidden;
                padding: 5px;
              }
              /* NB use of pointer-events to only allow events from the × icon */
              ::slotted(div.item) {
                background-color: var(--multi-input-item-bg-color, #dedede);
                border: var(--multi-input-item-border, 1px solid #ccc);
                border-radius: 2px;
                color: #222;
                display: inline-block;
                font-size: var(--multi-input-item-font-size, 14px);
                margin: 5px;
                padding: 2px 25px 2px 5px;
                pointer-events: none;
                position: relative;
                top: -1px;
              }
              /* NB pointer-events: none above */
              ::slotted(div.item:hover) {
                background-color: #eee;
                color: black;
              }
              ::slotted(input) {
                border: none;
                font-size: var(--multi-input-input-font-size, 14px);
                outline: none;
                padding: 10px 10px 10px 5px; 
              }
              </style>
              <slot></slot>`;
          
              this._datalist = this.querySelector('datalist');
              this._allowedValues = [];
              for (const option of this._datalist.options) {
                this._allowedValues.push(option.value);
              }
          
              this._input = this.querySelector('input');
              this._input.onblur = this._handleBlur.bind(this);
              this._input.oninput = this._handleInput.bind(this);
              this._input.onkeydown = (event) => {
                this._handleKeydown(event);
              };
          
              this._allowDuplicates = this.hasAttribute('allow-duplicates');
            }
          
            // Called by _handleKeydown() when the value of the input is an allowed value.
            _addItem(value) {
              this._input.value = '';
              const item = document.createElement('div');
              item.classList.add('item');
              item.textContent = value;
              this.insertBefore(item, this._input);
              //add here
              if (multiInput.getValues().length > 0) {
              //values.textContent = `Got ${multiInput.getValues().join(' and ')}!`;
              document.getElementById('amenities').value=multiInput.getValues()
                document.getElementById('final-amenities').value=(document.getElementById('amenities').value)
                console.log(document.getElementById('final-amenities').value)
            } else {
              //values.textContent = 'Got noone  :`^(.'; 
            }  
          
          
          
          
          //
          
              item.onclick = () => {
                this._deleteItem(item);
                document.getElementById('amenities').value=multiInput.getValues()
                document.getElementById('final-amenities').value=(document.getElementById('amenities').value)
                console.log(document.getElementById('final-amenities').value)
          
              };
          
              // Remove value from datalist options and from _allowedValues array.
              // Value is added back if an item is deleted (see _deleteItem()).
              if (!this._allowDuplicates) {
                for (const option of this._datalist.options) {
                  if (option.value === value) {
                    option.remove();
                  };
                }
                this._allowedValues =
                this._allowedValues.filter((item) => item !== value);
              }
            }
          
            // Called when the × icon is tapped/clicked or
            // by _handleKeydown() when Backspace is entered.
            _deleteItem(item) {
              const value = item.textContent;
              item.remove();
              // If duplicates aren't allowed, value is removed (in _addItem())
              // as a datalist option and from the _allowedValues array.
              // So — need to add it back here.
              if (!this._allowDuplicates) {
                const option = document.createElement('option');
                option.value = value;
                // Insert as first option seems reasonable...
                this._datalist.insertBefore(option, this._datalist.firstChild);
                this._allowedValues.push(value);
              }
            }
          
            // Avoid stray text remaining in the input element that's not in a div.item.
            _handleBlur() {
              this._input.value = '';
            }
          
            // Called when input text changes,
            // either by entering text or selecting a datalist option.
            _handleInput() {
              // Add a div.item, but only if the current value
              // of the input is an allowed value
              const value = this._input.value;
              if (this._allowedValues.includes(value)) {
                this._addItem(value);
              }
            }
          
            // Called when text is entered or keys pressed in the input element.
            _handleKeydown(event) {
              const itemToDelete = event.target.previousElementSibling;
              const value = this._input.value;
              // On Backspace, delete the div.item to the left of the input
              if (value ==='' && event.key === 'Backspace' && itemToDelete) {
                this._deleteItem(itemToDelete);
              // Add a div.item, but only if the current value
              // of the input is an allowed value
              } else if (this._allowedValues.includes(value)) {
                this._addItem(value);
                
          
          
              }
            }
          
            // Public method for getting item values as an array.
            getValues() {
              const values = [];
              const items = this.querySelectorAll('.item');
              for (const item of items) {
                values.push(item.textContent);
              }
              return values;
            }
          }
          
          window.customElements.define('multi-input', MultiInput);
          
          </script>
          <script src="../javascripts/makeCartVisible.js"></script>
          <script>
            document.getElementById('keyword').addEventListener('keypress',function(e){
              if(e.key==='Enter')
              {
                e.preventDefault()
                document.getElementById('searchBtn').click()
              }
            })
          </script>
</body>

</html>